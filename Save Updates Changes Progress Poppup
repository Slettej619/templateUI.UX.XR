You are given a task to integrate an existing React component in the codebase

The codebase should support:
- shadcn project structure  
- Tailwind CSS
- Typescript

If it doesn't, provide instructions on how to setup project via shadcn CLI, install Tailwind or Typescript.

Determine the default path for components and styles. 
If default path for components is not /components/ui, provide instructions on why it's important to create this folder
Copy-paste this component to /components/ui folder:
```tsx
unsave-popup.tsx
"use client";

import { Loader2, Save } from "lucide-react";
import { AnimatePresence, easeOut, motion, useAnimation } from "motion/react";
import { Button } from "@/components/ui/button";
import { useState, useEffect, useCallback, useMemo, memo } from "react";
import { cn } from "@/lib/utils";
import React from "react";

const UnsavePopupDescription = memo(
  ({ children }: { children: React.ReactNode }) => {
    return <div className="flex flex-row items-center gap-2">{children}</div>;
  }
);
UnsavePopupDescription.displayName = "UnsavePopupDescription";

const UnsavePopupAction = memo(
  ({
    children,
    isLoading,
    onClick,
  }: {
    children: React.ReactNode;
    isLoading?: boolean;
    onClick?: () => Promise<void>;
  }) => {
    return (
      <Button onClick={onClick} disabled={isLoading} className="rounded-lg">
        {isLoading ? (
          <span className="flex items-center gap-2">
            <Loader2 className="h-4 w-4 animate-spin" />
            Saving...
          </span>
        ) : (
          children
        )}
      </Button>
    );
  }
);
UnsavePopupAction.displayName = "UnsavePopupAction";

const UnsavePopupDismiss = memo(
  ({
    children,
    onClick,
  }: {
    children: React.ReactNode;
    onClick?: () => void;
  }) => {
    return (
      <Button variant="ghost" onClick={onClick} className="rounded-lg">
        {children}
      </Button>
    );
  }
);
UnsavePopupDismiss.displayName = "UnsavePopupDismiss";

// Main component
const UnsavePopup = memo(function UnsavePopup({
  children,
  onSave,
  onReset,
  shouldBlockFn,
  show,
  className,
}: {
  children: React.ReactNode;
  className?: string;
  onSave?: () => Promise<void>;
  onReset?: () => void;
  shouldBlockFn?: () => boolean;
  show: boolean;
}) {
  const controls = useAnimation();
  const [isLoading, setIsLoading] = useState(false);

  const shakeAnimation = useCallback(
    () => ({
      x: [0, -8, 12, -15, 8, -10, 5, -3, 2, -1, 0],
      y: [0, 4, -9, 6, -12, 8, -3, 5, -2, 1, 0],
      filter: [
        "blur(0px)",
        "blur(2px)",
        "blur(2px)",
        "blur(3px)",
        "blur(2px)",
        "blur(2px)",
        "blur(1px)",
        "blur(2px)",
        "blur(1px)",
        "blur(1px)",
        "blur(0px)",
      ],
      transition: {
        duration: 0.4,
        ease: easeOut,
      },
    }),
    []
  );

  const triggerShake = useCallback(async () => {
    await controls.start(shakeAnimation());
  }, [controls, shakeAnimation]);

  const handleSave = useCallback(async () => {
    setIsLoading(true);
    await onSave?.();
    setIsLoading(false);
  }, [onSave]);

  const handleReset = useCallback(() => {
    onReset?.();
  }, [onReset]);

  const { hasCompoundComponents, hasValidComponents } = useMemo(() => {
    const childrenArray = React.Children.toArray(children);
    const hasCompound = childrenArray.some(
      (child) =>
        React.isValidElement(child) &&
        (child.type === UnsavePopupDescription ||
          child.type === UnsavePopupAction ||
          child.type === UnsavePopupDismiss)
    );

    if (!hasCompound) {
      return { hasCompoundComponents: false, hasValidComponents: true };
    }

    const hasDescription = childrenArray.some(
      (child) =>
        React.isValidElement(child) && child.type === UnsavePopupDescription
    );
    const hasAction = childrenArray.some(
      (child) => React.isValidElement(child) && child.type === UnsavePopupAction
    );
    const hasDismiss = childrenArray.some(
      (child) =>
        React.isValidElement(child) && child.type === UnsavePopupDismiss
    );

    return {
      hasCompoundComponents: true,
      hasValidComponents: hasDescription && hasAction && hasDismiss,
    };
  }, [children]);

  useEffect(() => {
    if (hasCompoundComponents && !hasValidComponents) {
      throw new Error(
        cn(
          "When using UnsavePopupDescription, UnsavePopupAction, or UnsavePopupDismiss, ",
          "you must use all three components together. Check out the docs for more info."
        )
      );
    }
  }, [hasCompoundComponents, hasValidComponents]);

  const defaultButtons = useCallback(
    () => (
      <div className="flex flex-row items-center gap-1">
        <Button variant="ghost" onClick={handleReset} className="rounded-lg">
          Reset
        </Button>
        <Button
          onClick={handleSave}
          disabled={isLoading}
          className="rounded-lg"
        >
          {isLoading ? (
            <span className="flex items-center gap-2">
              <Loader2 className="h-4 w-4 animate-spin" />
              Saving...
            </span>
          ) : (
            <span className="flex items-center gap-2">
              <Save className="h-4 w-4" />
              Save
            </span>
          )}
        </Button>
      </div>
    ),
    [isLoading, handleReset, handleSave]
  );

  useEffect(() => {
    if (shouldBlockFn && shouldBlockFn()) {
      triggerShake();
    }
  }, [shouldBlockFn, triggerShake]);

  return (
    <AnimatePresence>
      {show && (
        <motion.div
          initial={{ y: 100, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          exit={{ y: 100, opacity: 0 }}
          transition={{ type: "spring", bounce: 0.5, duration: 0.5 }}
          className="fixed right-0 bottom-4 left-0 z-50 mx-auto w-fit"
        >
          <motion.div
            animate={controls}
            className={cn(
              "flex w-96 flex-row items-center justify-between gap-2 rounded-lg",
              "border border-gray-200 bg-white px-4 py-2 text-sm shadow-md",
              className
            )}
          >
            {hasCompoundComponents ? (
              children
            ) : (
              <>
                <div className="flex flex-row items-center gap-2">
                  {children}
                </div>
                {defaultButtons()}
              </>
            )}
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
});

UnsavePopup.displayName = "UnsavePopup";

export {
  UnsavePopup,
  UnsavePopupDescription,
  UnsavePopupAction,
  UnsavePopupDismiss,
};


demo.tsx
"use client"

import type React from "react"

import { Label } from "@/components/ui/label"
import { X, Info } from "lucide-react"
import { Input } from "@/components/ui/input"
import { useState, useCallback, useMemo } from "react"
import { Button } from "@/components/ui/button"
import { UnsavePopup } from "@/components/ui/unsave-popup"
import { cn } from "@/lib/utils"

export function UnsavePopupDemo() {
  const [value, setValue] = useState("")
  const [showPopup, setShowPopup] = useState(false)
  const [shouldBlockNav, setShouldBlockNav] = useState(false)
  const [closeForm, setCloseForm] = useState(false)
  const [isSaved, setIsSaved] = useState(false)

  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    setValue(e.target.value)
    setShowPopup(true)
    setIsSaved(false)
  }, [])

  const handleSave = useCallback(async () => {
    await new Promise((resolve) => setTimeout(resolve, 1000))
    setShowPopup(false)
    setIsSaved(true)
  }, [])

  const handleReset = useCallback(() => {
    setValue("")
    setShowPopup(false)
    setShouldBlockNav(false)
  }, [])

  const handleCloseFormClick = useCallback(() => {
    if (value && !isSaved) {
      setShouldBlockNav(true)
      setTimeout(() => setShouldBlockNav(false), 100)
      return
    }
    setCloseForm(true)
  }, [value, isSaved])

  const shouldBlockFn = useCallback(() => shouldBlockNav, [shouldBlockNav])

  const formContent = useMemo(
    () => (
      <div className="grid w-full max-w-sm items-center gap-1.5">
        <Label htmlFor="name" className="font-medium">
          Name
        </Label>
        <Input
          placeholder="Type anything to trigger it..."
          value={value}
          className="text-sm"
          onChange={handleInputChange}
        />
      </div>
    ),
    [value, handleInputChange],
  )

  const popupContent = useMemo(
    () => (
      <>
        <Info className="h-4 w-4" /> Try to press the &quot;x&quot; to close it!
      </>
    ),
    [],
  )

  return (
    <div className="min-w-[400px]">
      {!closeForm && (
        <div key="preview" className="flex flex-col h-full items-center justify-center p-2">
          <div
            className={cn(
              "flex items-center justify-center p-4 gap-2 border border-gray-200",
              "rounded-lg w-full max-w-[500px] h-[300px] shadow-md relative",
            )}
          >
            {formContent}
            <div className="absolute top-1 right-1">
              <Button
                variant="ghost"
                size="icon"
                onClick={handleCloseFormClick}
                className="rounded-full hover:bg-transparent"
              >
                <X className="h-4 w-4 text-gray-500" />
              </Button>
            </div>
          </div>
        </div>
      )}

      <UnsavePopup
        onSave={handleSave}
        onReset={handleReset}
        shouldBlockFn={shouldBlockFn}
        show={showPopup}
        className="w-full"
      >
        {popupContent}
      </UnsavePopup>
    </div>
  )
}


```

Copy-paste these files for dependencies:
```tsx
originui/button
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";
import * as React from "react";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-lg text-sm font-medium transition-colors outline-offset-2 focus-visible:outline focus-visible:outline-2 focus-visible:outline-ring/70 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground shadow-sm shadow-black/5 hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm shadow-black/5 hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm shadow-black/5 hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm shadow-black/5 hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-lg px-3 text-xs",
        lg: "h-10 rounded-lg px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />
    );
  },
);
Button.displayName = "Button";

export { Button, buttonVariants };

```
```tsx
originui/label
"use client";

import * as React from "react";

import { cn } from "@/lib/utils";

const Label = React.forwardRef<HTMLLabelElement, React.LabelHTMLAttributes<HTMLLabelElement>>(
  ({ className, ...props }, ref) => (
    <label
      ref={ref}
      className={cn(
        "text-sm font-medium leading-4 text-foreground peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
        className,
      )}
      {...props}
    />
  ),
);
Label.displayName = "Label";

export { Label };

```
```tsx
originui/input
import { cn } from "@/lib/utils";
import * as React from "react";

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-lg border border-input bg-background px-3 py-2 text-sm text-foreground shadow-sm shadow-black/5 transition-shadow placeholder:text-muted-foreground/70 focus-visible:border-ring focus-visible:outline-none focus-visible:ring-[3px] focus-visible:ring-ring/20 disabled:cursor-not-allowed disabled:opacity-50",
          type === "search" &&
            "[&::-webkit-search-cancel-button]:appearance-none [&::-webkit-search-decoration]:appearance-none [&::-webkit-search-results-button]:appearance-none [&::-webkit-search-results-decoration]:appearance-none",
          type === "file" &&
            "p-0 pr-3 italic text-muted-foreground/70 file:me-3 file:h-full file:border-0 file:border-r file:border-solid file:border-input file:bg-transparent file:px-3 file:text-sm file:font-medium file:not-italic file:text-foreground",
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);
Input.displayName = "Input";

export { Input };

```

Install NPM dependencies:
```bash
motion, lucide-react, @radix-ui/react-slot, class-variance-authority
```

Implementation Guidelines
 1. Analyze the component structure and identify all required dependencies
 2. Review the component's argumens and state
 3. Identify any required context providers or hooks and install them
 4. Questions to Ask
 - What data/props will be passed to this component?
 - Are there any specific state management requirements?
 - Are there any required assets (images, icons, etc.)?
 - What is the expected responsive behavior?
 - What is the best place to use this component in the app?

Steps to integrate
 0. Copy paste all the code above in the correct directories
 1. Install external dependencies
 2. Fill image assets with Unsplash stock images you know exist
 3. Use lucide-react icons for svgs or logos if component requires them
