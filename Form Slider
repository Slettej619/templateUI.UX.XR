You are given a task to integrate an existing React component in the codebase

The codebase should support:
- shadcn project structure  
- Tailwind CSS
- Typescript

If it doesn't, provide instructions on how to setup project via shadcn CLI, install Tailwind or Typescript.

Determine the default path for components and styles. 
If default path for components is not /components/ui, provide instructions on why it's important to create this folder
Copy-paste this component to /components/ui folder:
```tsx
snappy-slider.tsx
import * as React from "react"
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

interface CustomSliderProps {
    values: number[]
    defaultValue: number
    value?: number
    resetKey?: number
    snapping?: boolean
    min?: number
    max?: number
    step?: number
    onChange: (value: number) => void
    config?: {
        snappingThreshold?: number
        labelFormatter?: (value: number) => string
    }
    label: string
    prefix?: string
    suffix?: string
    className?: string
}

const formatNumber = (value: number, step: number = 1): string => {
    // Attempt to convert to number if it isn't already
    const numValue = Number(value)
    
    // Throw error if conversion results in NaN
    if (isNaN(numValue)) {
        throw new Error(`Invalid number value: ${value}`)
    }

    const decimalPlaces = step.toString().split('.')[1]?.length || 0
    if (decimalPlaces === 0 && Number.isInteger(numValue)) {
        return numValue.toString()
    }
    return numValue.toFixed(decimalPlaces)
}

/**
 * SnappySlider is a highly interactive range input component that combines precise value control
 * with intuitive visual feedback. It features:
 * 
 * - Snap-to points for accurate value selection
 * - Visual markers for predefined values
 * - Direct numeric input with keyboard controls
 * - Touch and mouse drag support
 * - Customizable step sizes and ranges
 * - Out-of-bounds value indication
 * - Double-click to reset functionality
 * - Prefix/suffix label support
 * 
 * @example
 * ```tsx
 * <SnappySlider
 *   values={[0, 25, 50, 75, 100]}
 *   defaultValue={50}
 *   label="Opacity"
 *   suffix="%"
 *   onChange={(value) => console.log(value)}
 * />
 * ```
 */
const SnappySlider = React.forwardRef<
    HTMLDivElement,
    CustomSliderProps
>(({ 
    values, 
    defaultValue,
    value,
    resetKey,
    snapping = true,
    min: providedMin,
    max: providedMax,
    step,
    onChange,
    config = {},
    label,
    prefix,
    suffix,
    className,
    ...props 
}, ref) => {
    const sliderRef = React.useRef<HTMLDivElement>(null)
    const { snappingThreshold = 1, labelFormatter } = config

    const defaultValueArray = [...values, defaultValue].sort((a, b) => a - b)
    
    // Calculate input bounds using defaultValueArray
    const inputMin = providedMin ?? Math.min(...defaultValueArray)
    const inputMax = providedMax ?? Math.max(...defaultValueArray)
    
    // Filter values to only those within input range (if min/max provided)
    const sliderValues = providedMin !== undefined && providedMax !== undefined
        ? defaultValueArray.filter(v => v >= providedMin && v <= providedMax)
        : defaultValueArray

    // Calculate slider visual bounds from filtered values
    const sliderMin = Math.min(...sliderValues)
    const sliderMax = Math.max(...sliderValues)
    
    const computedStep = step ?? (label.includes("Duration") ? 1 : 0.1)

    // Track both controlled and internal state
    const [internalValue, setInternalValue] = React.useState(defaultValue)
    const currentValue = value ?? internalValue

    // Update input display value
    const [inputValue, setInputValue] = React.useState(formatNumber(currentValue, computedStep))

    // Check if value is outside slider bounds
    const isOutOfBounds = currentValue < sliderMin || currentValue > sliderMax

    // Calculate percentage for slider position (clamped to slider range)
    const sliderPercentage = ((Math.min(Math.max(currentValue, sliderMin), sliderMax) - sliderMin) / (sliderMax - sliderMin)) * 100

    // Update internal state when controlled value changes
    React.useEffect(() => {
        if (value !== undefined) {
            setInternalValue(value)
            setInputValue(formatNumber(value, computedStep))
        }
    }, [value, computedStep])

    const handleValueChange = (newValue: number) => {
        setInternalValue(newValue)
        setInputValue(formatNumber(newValue, computedStep))
        onChange(newValue)
    }

    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setInputValue(e.target.value)
    }

    const handleInputBlur = () => {
        const newValue = Number(inputValue)

        if (isNaN(newValue)) {
            setInputValue(formatNumber(currentValue, computedStep))
        } else {
            // Clamp to input range (which might be wider than slider range)
            const clampedValue = Math.max(inputMin, Math.min(inputMax, newValue))
            const steppedValue = Math.round(clampedValue / computedStep) * computedStep
            setInputValue(formatNumber(steppedValue, computedStep))
            handleValueChange(steppedValue)
        }
    }

    // Update slider interaction logic
    const handleInteraction = React.useCallback((clientX: number) => {
        const slider = sliderRef.current
        if (!slider) return

        const rect = slider.getBoundingClientRect()
        const percentage = Math.max(0, Math.min(1, (clientX - rect.left) / rect.width))
        const rawValue = percentage * (sliderMax - sliderMin) + sliderMin

        if (snapping) {
            // Use defaultValueArray for snap points instead of values
            const snapPoints = [...new Set([...defaultValueArray, currentValue])].sort((a, b) => a - b)
            const closestValue = snapPoints.reduce((prev, curr) => {
                return Math.abs(curr - rawValue) < Math.abs(prev - rawValue) ? curr : prev
            })
            
            if (Math.abs(closestValue - rawValue) <= snappingThreshold) {
                handleValueChange(closestValue)
                return
            }
        }

        const steppedValue = Math.round(rawValue / computedStep) * computedStep
        const clampedValue = Math.max(sliderMin, Math.min(sliderMax, steppedValue))
        handleValueChange(clampedValue)
    }, [sliderMin, sliderMax, defaultValueArray, currentValue, computedStep, snapping, snappingThreshold])

    React.useEffect(() => {
        const slider = sliderRef.current
        if (!slider) return

        const handleMouseDown = (e: MouseEvent) => {
            // Prevent text selection while dragging
            e.preventDefault()
            handleInteraction(e.clientX)

            // Add selection prevention to document during drag
            document.body.style.userSelect = 'none'

            const handleMouseMove = (e: MouseEvent) => {
                handleInteraction(e.clientX)
            }

            const handleMouseUp = () => {
                document.removeEventListener('mousemove', handleMouseMove)
                // Restore text selection when done dragging
                document.body.style.userSelect = ''
            }

            document.addEventListener('mousemove', handleMouseMove)
            document.addEventListener('mouseup', handleMouseUp, { once: true })
        }

        const handleTouchStart = (e: TouchEvent) => {
            e.preventDefault()
            handleInteraction(e.touches[0].clientX)

            const handleTouchMove = (e: TouchEvent) => {
                handleInteraction(e.touches[0].clientX)
            }

            document.addEventListener('touchmove', handleTouchMove, { passive: false })
            document.addEventListener('touchend', () => {
                document.removeEventListener('touchmove', handleTouchMove)
            }, { once: true })
        }

        slider.addEventListener('mousedown', handleMouseDown)
        slider.addEventListener('touchstart', handleTouchStart, { passive: false })

        return () => {
            slider.removeEventListener('mousedown', handleMouseDown)
            slider.removeEventListener('touchstart', handleTouchStart)
            // Ensure we clean up the user-select style if component unmounts during drag
            document.body.style.userSelect = ''
        }
    }, [sliderMin, sliderMax, onChange, values, defaultValue, label, computedStep, snapping, snappingThreshold, handleInteraction])

    React.useEffect(() => {
        const slider = sliderRef.current
        if (!slider) return

        const handleDoubleClick = () => {
            onChange(defaultValue)
        }

        slider.addEventListener('dblclick', handleDoubleClick)
        return () => slider.removeEventListener('dblclick', handleDoubleClick)
    }, [onChange, defaultValue])

    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
        if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {
            e.preventDefault()
            const currentValue = Number(inputValue)
            if (isNaN(currentValue)) return

            const newValue = currentValue + (e.key === 'ArrowUp' ? computedStep : -computedStep)
            const clampedValue = Math.max(sliderMin, Math.min(sliderMax, newValue))

            // Update both the input value and trigger the onChange
            setInputValue(formatNumber(clampedValue, computedStep))
            onChange(clampedValue)
        }
    }

    return (
        <div 
            className={cn(
                "[--mark-slider-gap:0.25rem] [--mark-slider-height:0.5rem] [--mark-slider-track-height:0.375rem] [--mark-slider-marker-width:1px]",
                "flex flex-col gap-[--mark-slider-gap] pb-7", 
                className
            )} 
            {...props}
        >
            <SnappySliderHeader>
                <SnappySliderLabel>{label}</SnappySliderLabel>
                <SnappySliderValue
                    value={inputValue}
                    onChange={handleInputChange}
                    onBlur={handleInputBlur}
                    onKeyDown={handleKeyDown}
                    prefix={prefix}
                    suffix={suffix}
                    className={cn(isOutOfBounds && "opacity-75")}
                />
            </SnappySliderHeader>
            <div className="relative h-[--mark-slider-height]">
                <div ref={sliderRef} className="absolute inset-0">
                    <div className="absolute top-1/2 -translate-y-1/2 w-full h-[--mark-slider-track-height] bg-primary/10 rounded-sm overflow-hidden">
                        {/* Progress overlay */}
                        <div
                            className={cn(
                                "absolute top-0 h-full z-[1] bg-primary"
                            )}
                            style={{ width: `${sliderPercentage}%` }}
                        />
                        
                        {/* Regular marks */}
                        {sliderValues.map((mark, index) => {
                            if (mark === 0) return null;
                            const markPercentage = ((mark - sliderMin) / (sliderMax - sliderMin)) * 100
                            if (markPercentage < 0 || markPercentage > 100) return null
                            return (
                                <div
                                    key={`${mark}-${index}`}
                                    className={cn(
                                        "absolute top-0 w-[--mark-slider-marker-width] z-[2] h-full -translate-x-[calc(var(--mark-slider-marker-width)/2)]",
                                        "bg-white/90 dark:bg-black/90"
                                    )}
                                    style={{ left: `${markPercentage}%` }}
                                />
                            )
                        })}
                    </div>

                    {/* Zero marker */}
                    {sliderValues.includes(0) && (
                        <div
                            className="absolute top-1/2 -translate-y-1/2 z-20"
                            style={{ left: `${((0 - sliderMin) / (sliderMax - sliderMin)) * 100}%` }}
                        >
                            <div className="h-3 w-[--mark-slider-marker-width] bg-red-600 -translate-x-[calc(var(--mark-slider-marker-width)/2)]" />
                        </div>
                    )}

                    {/* Thumb */}
                    <div
                        className={cn(
                            "absolute z-30 top-1/2 -translate-y-[35%] -translate-x-1/2 cursor-grab active:cursor-grabbing",
                            isOutOfBounds && "opacity-75"
                        )}
                        style={{ left: `${sliderPercentage}%` }}
                    >
                        {/* Triangle */}
                        <div className={cn(
                            "w-0 h-0 border-[5px] border-transparent border-b-primary mt-2",
                            isOutOfBounds && "border-b-primary/20"
                        )} />
                        {/* Square */}
                        <div className={cn(
                            "w-[10px] h-[10px]",
                            isOutOfBounds ? "bg-primary/20" : "bg-primary"
                        )} />
                        {/* Text */}
                        <div className="absolute top-[22px] left-1/2 -translate-x-1/2 whitespace-nowrap">
                            <span className={cn(
                                "text-xs font-medium",
                                isOutOfBounds && "opacity-75"
                            )}>
                                {isOutOfBounds 
                                    ? currentValue < sliderMin 
                                        ? `<${formatNumber(sliderMin, computedStep)}`
                                        : `>${formatNumber(sliderMax, computedStep)}`
                                    : formatNumber(currentValue, computedStep)}
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
})
SnappySlider.displayName = "SnappySlider"

const SnappySliderHeader = React.forwardRef<
    HTMLDivElement,
    React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
    <div
        ref={ref}
        className={cn("flex justify-between items-center mb-0.5", className)}
        {...props}
    />
))
SnappySliderHeader.displayName = "SnappySliderHeader"

const SnappySliderLabel = React.forwardRef<
    HTMLLabelElement,
    React.LabelHTMLAttributes<HTMLLabelElement>
>(({ className, ...props }, ref) => (
    <label
        ref={ref}
        className={cn("text-xs font-medium text-primary/50", className)}
        {...props}
    />
))
SnappySliderLabel.displayName = "SnappySliderLabel"

const SnappySliderValue = React.forwardRef<
    HTMLInputElement,
    React.InputHTMLAttributes<HTMLInputElement> & { 
        prefix?: string
        suffix?: string
    }
>(({ className, prefix, suffix, ...props }, ref) => {
    const inputRef = React.useRef<HTMLInputElement>(null)

    const handleContainerClick = () => {
        inputRef.current?.focus()
    }

    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
        const input = e.currentTarget
        const value = parseFloat(input.value)
        
        switch (e.key) {
            case 'Enter':
                input.blur()
                break
            case 'ArrowUp':
                e.preventDefault()
                if (!isNaN(value)) {
                    const step = e.shiftKey ? 10 : 1
                    input.value = String(value + step)
                    input.dispatchEvent(new Event('change', { bubbles: true }))
                }
                break
            case 'ArrowDown':
                e.preventDefault()
                if (!isNaN(value)) {
                    const step = e.shiftKey ? 10 : 1
                    input.value = String(value - step)
                    input.dispatchEvent(new Event('change', { bubbles: true }))
                }
                break
        }
    }

    return (
        <div 
            className="group inline-flex items-center bg-primary/5 rounded px-0.5 focus-within:ring-1 focus-within:ring-primary cursor-text w-20"
            onClick={handleContainerClick}
        >
            {prefix && <span className="text-xs text-primary/75 select-none shrink-0">{prefix}</span>}
            <input
                ref={(node) => {
                    if (typeof ref === 'function') ref(node)
                    else if (ref) ref.current = node
                    inputRef.current = node
                }}
                type="number"
                inputMode="decimal"
                onKeyDown={handleKeyDown}
                className={cn(
                    "w-full min-w-0 text-right text-xs bg-transparent border-none focus:outline-none",
                    "[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none",
                    "tabular-nums text-primary",
                    className
                )}
                {...props}
            />
            {suffix && <span className="text-xs text-primary/75 select-none shrink-0">{suffix}</span>}
        </div>
    )
})
SnappySliderValue.displayName = "SnappySliderValue"

export { SnappySlider }


demo.tsx
"use client"

import * as React from "react"
import { SnappySlider } from "@/components/components/snappy-slider"

// Radio station data for London FM
const LONDON_FM_STATIONS: Record<number, string> = {
  87.7: "Resonance FM",
  88.8: "BBC Radio 2",
  91.0: "BBC Radio 3",
  93.2: "BBC Radio 4",
  94.9: "BBC London",
  95.8: "Capital FM",
  97.3: "LBC News",
  98.5: "Capital XTRA",
  100.0: "Kiss FM",
  102.2: "Magic FM",
  104.9: "XFM London"
}

function RadioDisplay({ frequency }: { frequency: number }) {
  const roundedFreq = Number(frequency.toFixed(1))
  return (
    <div className="mt-2 text-sm">
      <span className="font-mono">{roundedFreq} MHz</span>
      {LONDON_FM_STATIONS[roundedFreq] && (
        <span className="ml-2 font-medium text-foreground">
          {LONDON_FM_STATIONS[roundedFreq]}
        </span>
      )}
    </div>
  )
}

function SnappySliderRadio() {
  const [frequency, setFrequency] = React.useState(95.8)
  
  return (
    <div className="space-y-2 w-[400px]">
      <SnappySlider
        values={Object.keys(LONDON_FM_STATIONS).map(Number)}
        defaultValue={95.8}
        value={frequency}
        onChange={setFrequency}
        min={87.5}
        max={108.0}
        snapping={true}
        step={0.1}
        label="FM Radio Frequency"
        suffix="&nbsp;MHz"
        config={{snappingThreshold:0.3}}
      />
      <RadioDisplay frequency={frequency} />
    </div>
  )
}

function SnappySliderGrowthStages() {
  const [stage1Growth, setStage1Growth] = React.useState(10)
  const [stage1Duration, setStage1Duration] = React.useState(5)
  const [stage2Growth, setStage2Growth] = React.useState(5)
  const [stage2Duration, setStage2Duration] = React.useState(5)
  const [terminalGrowth, setTerminalGrowth] = React.useState(2.5)
  
  const durationMarks = [1, 2, 3, 5, 10, 15, 20, 25, 30]
  const growthRateMarks = [-20, -10, -5, -2, -1, 0, 1, 2, 3, 4, 5, 10, 15, 20, 30, 50]
  
  return (
    <div className="space-y-8 w-[600px]">
      <div className="space-y-6">
        {/* Stage 1 */}
        <section>
          <h3 className="text-sm font-medium mb-4">Growth Stage 1</h3>
          <div className="grid grid-cols-2 gap-4">
            <SnappySlider
              values={durationMarks}
              defaultValue={5}
              value={stage1Duration}
              onChange={setStage1Duration}
              min={1}
              max={30}
              snapping={true}
              step={1}
              label="Duration"
              suffix="&nbsp;years"
            />
            <SnappySlider   
              values={growthRateMarks}
              defaultValue={10}
              value={stage1Growth}
              onChange={setStage1Growth}
              min={-20}
              max={50}
              snapping={true}
              step={0.1}
              label="Growth Rate"
              suffix="%"
            />
          </div>
        </section>

        {/* Stage 2 */}
        <section>
          <h3 className="text-sm font-medium mb-4">Growth Stage 2</h3>
          <div className="grid grid-cols-2 gap-4">
            <SnappySlider
              values={durationMarks}
              defaultValue={5}
              value={stage2Duration}
              onChange={setStage2Duration}
              min={1}
              max={30}
              snapping={true}
              step={1}
              label="Duration"
              suffix="&nbsp;years"
            />
            <SnappySlider
              values={growthRateMarks}
              defaultValue={5}
              value={stage2Growth}
              onChange={setStage2Growth}
              min={-20}
              max={50}
              snapping={true}
              step={0.1}
              label="Growth Rate"
              suffix="%"
            />
          </div>
        </section>

        {/* Terminal Stage */}
        <section>
          <h3 className="text-sm font-medium mb-4">Terminal Stage</h3>
          <div className="grid grid-cols-2 gap-4">
            <SnappySlider
              values={growthRateMarks}
              defaultValue={2.5}
              value={terminalGrowth}
              onChange={setTerminalGrowth}
              min={-20}
              max={20}
              snapping={true}
              step={0.1}
              label="Terminal Growth Rate"
              suffix="%"
            />
          </div>
        </section>
      </div>
    </div>
  )
}

function SnappySliderWithReset() {
  const [value, setValue] = React.useState(5)
  const [resetKey, setResetKey] = React.useState(0)
  
  const handleReset = () => {
    setValue(5)
    setResetKey(prev => prev + 1)
  }

  return (
    <div className="space-y-4 w-[400px]">
      <SnappySlider
        key={resetKey}
        resetKey={resetKey}
        values={[1, 2, 3, 5, 10, 15, 20]}
        defaultValue={5}
        value={value}
        onChange={setValue}
        min={1}
        max={20}
        snapping={true}
        step={1}
        label="Resettable Value"
        suffix="&nbsp;units"
      />
      <button 
        onClick={handleReset}
        className="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700"
      >
        Reset Slider
      </button>
    </div>
  )
}


function SnappySliderCoffee() {
    const [waterVolume, setWaterVolume] = React.useState(300); // default 300ml
    const [coffeeRatio, setCoffeeRatio] = React.useState(15); // default 1:15
    const [coffeeWeight, setCoffeeWeight] = React.useState(300 / 15); // Initialize based on default values

    // Handler for coffee ratio change
    const handleRatioChange = (newRatio: number) => {
        setCoffeeRatio(newRatio);
        setCoffeeWeight(waterVolume / newRatio);
    };

    // Handler for water volume change
    const handleWaterVolumeChange = (newWaterVolume: number) => {
        setWaterVolume(newWaterVolume);
        setCoffeeWeight(newWaterVolume / coffeeRatio);
    };

    // Handler for coffee weight change
    const handleCoffeeWeightChange = (newCoffeeWeight: number) => {
        setCoffeeWeight(newCoffeeWeight);
        setWaterVolume(newCoffeeWeight * coffeeRatio);
    };

    return (
        <div className="space-y-8 w-[400px]">
            <section>
                <h3 className="text-base font-medium mb-4">Coffee Brewing Adjustments</h3>

                <SnappySlider
                    values={[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]}
                    defaultValue={15}
                    value={coffeeRatio}
                    onChange={handleRatioChange}
                    min={10}
                    max={20}
                    snapping={true}
                    step={0.1}
                    label="Water-Coffee Ratio"
                    prefix="1&nbsp;:"
                    config={{ snappingThreshold: 0.2 }}
                />

                <SnappySlider
                    values={[150, 160, 170, 180, 200, 250, 300, 350, 400, 500, 600, 700]}
                    defaultValue={300}
                    value={waterVolume}
                    onChange={handleWaterVolumeChange}
                    min={150}
                    max={700}
                    snapping={true}
                    step={10}
                    label="Water Volume"
                    suffix="&nbsp;ml"
                    config={{ snappingThreshold: 10 }}
                />

                <SnappySlider
                    values={[10, 15, 20, 25, 30, 35, 40, 45, 50]}
                    defaultValue={waterVolume / coffeeRatio}
                    value={coffeeWeight}
                    onChange={handleCoffeeWeightChange}
                    min={10}
                    max={50}
                    snapping={true}
                    step={0.1}
                    label="Coffee Bean Weight"
                    suffix="&nbsp;g"
                    config={{ snappingThreshold: 0.5 }}
                />
            </section>
        </div>
    );
}


export { SnappySliderRadio, SnappySliderGrowthStages, SnappySliderWithReset, SnappySliderCoffee }
```

Install NPM dependencies:
```bash
clsx, tailwind-merge
```

Implementation Guidelines
 1. Analyze the component structure and identify all required dependencies
 2. Review the component's argumens and state
 3. Identify any required context providers or hooks and install them
 4. Questions to Ask
 - What data/props will be passed to this component?
 - Are there any specific state management requirements?
 - Are there any required assets (images, icons, etc.)?
 - What is the expected responsive behavior?
 - What is the best place to use this component in the app?

Steps to integrate
 0. Copy paste all the code above in the correct directories
 1. Install external dependencies
 2. Fill image assets with Unsplash stock images you know exist
 3. Use lucide-react icons for svgs or logos if component requires them
