You are given a task to integrate an existing React component in the codebase

The codebase should support:
- shadcn project structure  
- Tailwind CSS
- Typescript

If it doesn't, provide instructions on how to setup project via shadcn CLI, install Tailwind or Typescript.

Determine the default path for components and styles. 
If default path for components is not /components/ui, provide instructions on why it's important to create this folder
Copy-paste this component to /components/ui folder:
```tsx
featured-crm-demo-section.tsx
"use client";

import { Card, CardContent } from "@/components/ui/card";
import Image from "next/image";
import { useState } from "react";
import { PlayCircle } from "lucide-react";

export default function FeaturedCrmDemoSection() {
  const [isPlaying, setIsPlaying] = useState(false);
  const crmFeatures = [
    {
      title: "Sales Pipeline Tracking",
      subtitle:
        "Easily monitor every lead from first contact to final closure with a simple, visual pipeline that keeps your entire sales process clear and on track."
    },
    {
      title: "Automated Follow-ups",
      subtitle:
        "Use AI-powered reminders to send timely, personalized messages, helping you maintain momentum with leads and ensure no opportunity is ever lost."
    },
    {
      title: "Custom Reports",
      subtitle:
        "Quickly generate tailored, data-rich reports to measure results, uncover new opportunities, and guide your business decisions with precision and clarity."
    },
    {
      title: "Team Collaboration",
      subtitle:
        "Share updates instantly, assign tasks efficiently, and align your entire teamâ€™s efforts so you can close deals faster and deliver consistent results."
    }
  ];
  

  return (
    <div className=" max-w-7xl mx-auto bg-white text-black dark:bg-zinc-900 dark:text-white">
      {/* Header */}
      <header className="text-left py-12">
        <h1 className="text-6xl font-semibold tracking-tight">
          Empowering developers  <br />with AI-driven solutions.
        </h1>
      </header>

      {/* Templates Grid */}
      <section className="grid grid-cols-1 lg:grid-cols-3 gap-2 h-full">
        {/* Main video/image card */}
        <Card className="lg:col-span-2 bg-zinc-200 dark:bg-zinc-800 p-2 overflow-hidden relative mb-4 lg:mb-0 flex flex-col min-h-[500px]">
          <CardContent className="p-0 relative flex-grow group">
            {isPlaying ? (
              <video
                src="https://pub-940ccf6255b54fa799a9b01050e6c227.r2.dev/crm(1)(1)(1).mp4"
                autoPlay
                muted
                loop
                playsInline
                className="w-full h-full object-cover rounded-lg"
              />
            ) : (
              <>
                <Image
                  width={500}
                  height={500}
                  src="https://pub-940ccf6255b54fa799a9b01050e6c227.r2.dev/crm-featured.png"
                  alt="CRM Thumbnail"
                  className="w-full h-full object-cover rounded-lg"
                />

                {/* Play button overlay */}
                <button
                  onClick={() => setIsPlaying(true)}
                  className="absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity"
                >
                  <PlayCircle className="w-12 h-12 sm:w-16 sm:h-16 text-white drop-shadow-lg" />
                </button>
              </>
            )}
          </CardContent>
        </Card>

        {/* Feature cards */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-2 gap-2 h-full">
          {crmFeatures.map((feature, i) => (
            <div
              key={i}
              className="flex flex-col border border-zinc-200 dark:border-zinc-800 rounded-xl p-2 hover:shadow-lg cursor-pointer transition-shadow"
            >
              {/* Card */}
              <Card className="bg-zinc-200 dark:bg-zinc-800 flex-grow rounded-lg p-0" />

              {/* Title + Subtitle */}
              <div className="mt-2">
                <h3 className="text-sm font-medium text-zinc-900 dark:text-zinc-100 mb-1">
                  {feature.title}
                </h3>
                <p className="text-xs text-zinc-600 dark:text-zinc-400 leading-relaxed">
                  {feature.subtitle}
                </p>
              </div>
            </div>
          ))}
        </div>
      </section>


      <section className="mt-12 grid grid-cols-2 md:grid-cols-4 gap-1 text-sm">
        {[
          { name: "Salesforce", subtitle: "Enterprise CRM platform", domain: "salesforce.com" },
          { name: "HubSpot CRM", subtitle: "Inbound marketing & sales", domain: "hubspot.com" },
          { name: "Zoho CRM", subtitle: "Affordable CRM solution", domain: "zoho.com" },
          { name: "Pipedrive", subtitle: "Sales pipeline management", domain: "pipedrive.com" },
          { name: "Freshsales", subtitle: "Freshworks sales CRM", domain: "freshworks.com" },
          { name: "Microsoft Dynamics 365", subtitle: "Microsoft business suite", domain: "dynamics.com" },
          { name: "Copper CRM", subtitle: "Google Workspace CRM", domain: "copper.com" },
          { name: "Insightly", subtitle: "Project & CRM management", domain: "insightly.com" },
        ].map((integration) => (
          <div
            key={integration.name}
            className="p-3 flex items-center gap-3 hover:bg-zinc-50 dark:hover:bg-zinc-600 rounded-xl transition"
          >
            <Image
              src={`https://logo.clearbit.com/${integration.domain}`}
              alt={integration.name}
              width={40}
              height={40}
              className="w-10 h-10 object-contain rounded-xl bg-white p-1"
            />
            <div>
              <div className="font-normal">{integration.name}</div>
              <div className="text-xs text-gray-500 dark:text-gray-400">{integration.subtitle}</div>
            </div>
          </div>
        ))}
      </section>


      {/* Footer */}
      <footer className="text-center py-12">
        <div>Browse your fit </div>
      </footer>
    </div>
  );
}


demo.tsx
import FeaturedCrmDemoSection from "@/components/ui/featured-crm-demo-section";

export default function DemoOne() {
  return <FeaturedCrmDemoSection />;
}

```

Copy-paste these files for dependencies:
```tsx
shadcn/card
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className,
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className,
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

```

Install NPM dependencies:
```bash
next, lucide-react
```

Implementation Guidelines
 1. Analyze the component structure and identify all required dependencies
 2. Review the component's argumens and state
 3. Identify any required context providers or hooks and install them
 4. Questions to Ask
 - What data/props will be passed to this component?
 - Are there any specific state management requirements?
 - Are there any required assets (images, icons, etc.)?
 - What is the expected responsive behavior?
 - What is the best place to use this component in the app?

Steps to integrate
 0. Copy paste all the code above in the correct directories
 1. Install external dependencies
 2. Fill image assets with Unsplash stock images you know exist
 3. Use lucide-react icons for svgs or logos if component requires them
