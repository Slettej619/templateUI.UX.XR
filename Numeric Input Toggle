You are given a task to integrate an existing React component in the codebase

The codebase should support:
- shadcn project structure  
- Tailwind CSS
- Typescript

If it doesn't, provide instructions on how to setup project via shadcn CLI, install Tailwind or Typescript.

Determine the default path for components and styles. 
If default path for components is not /components/ui, provide instructions on why it's important to create this folder
Copy-paste this component to /components/ui folder:
```tsx
numeric-input.tsx
"use client";

import { useState } from "react";
import { cn } from "@/lib/utils";

interface NumericInputProps {
    min?: number;
    max?: number;
    step?: number;
    defaultValue?: number;
}

function NumericInput({
    min = 0,
    max = 100,
    step = 1,
    defaultValue = 50,
}: NumericInputProps) {
    const [value, setValue] = useState(defaultValue);
    const [isFocused, setIsFocused] = useState(false);

    const percentage = ((value - min) / (max - min)) * 100;

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const newValue = Number.parseFloat(e.target.value);
        if (!Number.isNaN(newValue) && newValue >= min && newValue <= max) {
            setValue(newValue);
        }
    };

    const incrementValue = () => {
        const newValue = Math.min(value + step, max);
        setValue(newValue);
    };

    const decrementValue = () => {
        const newValue = Math.max(value - step, min);
        setValue(newValue);
    };

    return (
        <div className="w-full max-w-xs">
            <div className="relative">
                <div
                    className={cn(
                        "flex items-center rounded-lg border",
                        "border-zinc-200 dark:border-zinc-800",
                        "bg-white dark:bg-black/5",
                        isFocused && "ring-2 ring-zinc-300 dark:ring-zinc-700"
                    )}
                >
                    <button
                        type="button"
                        onClick={decrementValue}
                        className="px-3 py-2 hover:bg-zinc-100 
                        dark:hover:bg-zinc-800
                        text-zinc-500 dark:text-zinc-400 transition-colors"
                        aria-label="Decrement button"
                    >
                        -
                    </button>
                    <input
                        type="number"
                        value={value}
                        onChange={handleChange}
                        onFocus={() => setIsFocused(true)}
                        onBlur={() => setIsFocused(false)}
                        min={min}
                        max={max}
                        step={step}
                        className="w-full text-center border-none bg-transparent focus:outline-none 
                        [-moz-appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none 
                        [&::-webkit-inner-spin-button]:appearance-none
                        text-zinc-900 dark:text-zinc-100"
                    />
                    <button
                        type="button"
                        onClick={incrementValue}
                        className="px-3 py-2 hover:bg-zinc-100 
                        dark:hover:bg-zinc-800
                        text-zinc-500 dark:text-zinc-400 transition-colors"
                        aria-label="Increment button"
                    >
                        +
                    </button>
                </div>

                <div className="mt-2 h-1.5 rounded-full bg-zinc-100 dark:bg-zinc-800 overflow-hidden">
                    <div
                        className="h-full bg-zinc-300 dark:bg-zinc-600 transition-all duration-200"
                        style={{ width: `${percentage}%` }}
                    />
                </div>

                <div className="mt-1 flex justify-between text-xs text-zinc-400 dark:text-zinc-500">
                    <span>{min}</span>
                    <span>{max}</span>
                </div>
            </div>
        </div>
    );
}

export { NumericInput }


demo.tsx
import { NumericInput } from "@/components/ui/numeric-input";

function NumericInputDemo() {
  return (
    <div className="block min-w-[300px]">
      <NumericInput />
    </div>
  );
}

export { NumericInputDemo };

```

Implementation Guidelines
 1. Analyze the component structure and identify all required dependencies
 2. Review the component's argumens and state
 3. Identify any required context providers or hooks and install them
 4. Questions to Ask
 - What data/props will be passed to this component?
 - Are there any specific state management requirements?
 - Are there any required assets (images, icons, etc.)?
 - What is the expected responsive behavior?
 - What is the best place to use this component in the app?

Steps to integrate
 0. Copy paste all the code above in the correct directories
 1. Install external dependencies
 2. Fill image assets with Unsplash stock images you know exist
 3. Use lucide-react icons for svgs or logos if component requires them
