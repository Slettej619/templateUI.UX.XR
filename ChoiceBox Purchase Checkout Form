You are given a task to integrate an existing React component in the codebase

The codebase should support:
- shadcn project structure  
- Tailwind CSS
- Typescript

If it doesn't, provide instructions on how to setup project via shadcn CLI, install Tailwind or Typescript.

Determine the default path for components and styles. 
If default path for components is not /components/ui, provide instructions on why it's important to create this folder
Copy-paste this component to /components/ui folder:
```tsx
choicebox-1.tsx
import React from "react";
import clsx from "clsx";

interface ChoiceboxGroupProps {
  direction: "row" | "column";
  label?: string;
  showLabel?: boolean;
  onChange: React.Dispatch<React.SetStateAction<string>> | React.Dispatch<React.SetStateAction<string[]>>;
  type: "radio" | "checkbox";
  value: string | string[];
  children: React.ReactNode;
  disabled?: boolean;
}

export const ChoiceboxGroup = ({
  direction,
  label,
  showLabel,
  onChange,
  type,
  value,
  children,
  disabled
}: ChoiceboxGroupProps) => {
  return (
    <div className="flex flex-col gap-2">
      {showLabel && label && (
        <label className="font-sans text-[13px] text-gray-900">{label}</label>
      )}
      <div className={clsx("flex gap-4", direction === "row" ? "flex-row" : "flex-col")}>
        {React.Children.map(children, (child) => {
          const props = disabled ? {
            onChange,
            type,
            valueSelected: value,
            disabled
          } : {
            onChange,
            type,
            valueSelected: value
          };
          return React.cloneElement(child as React.ReactElement<any>, props);
        })}
      </div>
    </div>
  );
};

const getChoiceboxGroupClasses = (isSelected: boolean, type: "radio" | "checkbox") => {
  let className = "relative border w-4 h-4 duration-200";
  if (type === "radio") {
    className += " rounded-[50%] after:w-2 after:h-2 after:rounded-[50%] after:absolute after:top-1/2 after:left-1/2 after:-translate-x-1/2 after:-translate-y-1/2 bg-background-100";
    if (isSelected) {
      className += " border-blue-900 after:bg-blue-900 after:scale-100";
    } else {
      className += " border-gray-500 after:bg-gray-500 after:scale-0";
    }
  } else {
    className += " rounded inline-flex items-center justify-center";
    if (isSelected) {
      className += " bg-blue-900 border-blue-900";
    } else {
      className += " bg-background-100 border-gray-500";
    }
  }

  return className;
};

interface ChoiceboxItemProps {
  title: string;
  description: string;
  value: string;
  type?: "radio" | "checkbox";
  valueSelected?: string | string[];
  onChange?: (value: string | string[]) => void;
  disabled?: boolean;
  children?: React.ReactNode;
}

ChoiceboxGroup.Item = ({
  title,
  description,
  value,
  type = "radio",
  valueSelected,
  onChange,
  disabled,
  children
}: ChoiceboxItemProps) => {
  const isSelected = !!(typeof valueSelected === "string" ? value === valueSelected : valueSelected?.includes(value));

  const onClick = () => {
    if (onChange && !disabled) {
      if (typeof valueSelected === "string") {
        onChange(value);
      } else {
        if (valueSelected) {
          if (isSelected) {
            onChange(valueSelected.filter((item) => item !== value));
          } else {
            onChange([...valueSelected, value]);
          }
        } else {
          onChange([value]);
        }
      }
    }
  };

  return (
    <div
      className={clsx(
        "border w-full rounded-md duration-150",
        isSelected ? "border-blue-600" : "border-gray-400",
        disabled ? "cursor-not-allowed" : "cursor-pointer",
        isSelected ? "bg-blue-100" : "bg-transparent"
      )}
      onClick={onClick}
    >
      <div className="flex items-center gap-4 p-3">
        <div className="flex flex-col gap-1 font-sans text-sm">
          <span className={clsx(
            "font-medium",
            disabled ? "text-gray-500" : isSelected ? "text-blue-900" : "text-gray-1000"
          )}>
            {title}
          </span>
          <span className={disabled ? "text-gray-500" : isSelected ? "text-blue-900" : "text-gray-900"}>
            {description}
          </span>
        </div>
        <div className="flex items-center ml-auto">
          <input
            disabled={disabled}
            type={type}
            value={value}
            checked={isSelected}
            onChange={onClick}
            className="absolute w-[1px] h-[1px] p-0 m-[-1] overflow-hidden whitespace-nowrap border-none"
          />
          <span className={getChoiceboxGroupClasses(isSelected, type)}>
            {type === "checkbox" && (
              <svg
                className={clsx("shrink-0", isSelected ? "fill-blue-900" : "fill-background")}
                height="16"
                viewBox="0 0 20 20"
                width="16"
              >
                <path
                  className="stroke-background"
                  d="M14 7L8.5 12.5L6 10"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                />
              </svg>
            )}
          </span>
        </div>
      </div>
      {children && isSelected && (
        <div className={clsx("border-t", isSelected ? "border-blue-600" : "border-gray-400")}>
          {children}
        </div>
      )}
    </div>
  );
};


demo.tsx
import { useState } from "react";
import { ChoiceboxGroup } from "@/components/ui/choicebox-1";

export default function DefaultDemo() {
  const [value1, setValue1] = useState<string>("trial");
  return (
      <div className="w-3/4">
        <ChoiceboxGroup
          direction="row"
          label="select a plan"
          onChange={setValue1}
          type="radio"
          value={value1}
        >
          <ChoiceboxGroup.Item
            description="Free for two weeks"
            title="Pro Trial"
            value="trial"
          />
          <ChoiceboxGroup.Item
            description="Get started now"
            title="Pro"
            value="pro"
          />
        </ChoiceboxGroup>
      </div>
  );
}

```

Copy-paste these files for dependencies:
```tsx
shugar/badge-1
import React from "react";
import Link from "next/link";
import clsx from "clsx";

const variants = {
  gray: "bg-gray-700 text-white fill-white",
  "gray-subtle": "bg-gray-200 text-gray-1000 fill-gray-1000",
  blue: "bg-blue-700 text-white fill-white",
  "blue-subtle": "bg-blue-200 text-blue-900 fill-blue-900",
  purple: "bg-purple-700 text-white fill-white",
  "purple-subtle": "bg-purple-200 text-purple-900 fill-purple-900",
  amber: "bg-amber-700 text-black fill-black",
  "amber-subtle": "bg-amber-200 text-amber-900 fill-amber-900",
  red: "bg-red-700 text-white fill-white",
  "red-subtle": "bg-red-200 text-red-900 fill-red-900",
  pink: "bg-pink-700 text-white fill-white",
  "pink-subtle": "bg-pink-300 text-pink-900 fill-pink-900",
  green: "bg-green-700 text-white fill-white",
  "green-subtle": "bg-green-200 text-green-900 fill-green-900",
  teal: "bg-teal-700 text-white fill-white",
  "teal-subtle": "bg-teal-300 text-teal-900 fill-teal-900",
  inverted: "bg-gray-1000 text-gray-100 fill-gray-100",
  trial: "bg-gradient-to-br from-trial-start to-trial-end text-white fill-white",
  turbo: "bg-gradient-to-br from-turbo-start to-turbo-end text-white fill-white",
  pill: "bg-background text-foreground fill-foreground border border-gray-alpha-400"
};

const sizes = {
  sm: "text-[11px] h-5 px-1.5 tracking-[0.2px] gap-[3px]",
  md: "text-[12px] h-6 px-2.5 tracking-normal gap-1",
  lg: "text-[14px] h-8 px-3 tracking-normal gap-1.5"
};

interface BadgeProps {
  children?: React.ReactNode;
  variant?: keyof typeof variants;
  size?: keyof typeof sizes;
  capitalize?: boolean;
  icon?: React.ReactNode;
  as?: typeof Link;
  href?: string;
}

const Content = ({ icon, size, children }: BadgeProps) => (
  <>
    <style>
      {`
          .smIconContainer svg {
              width: 11px;
              height: 11px;
          }
          .mdIconContainer svg {
              width: 14px;
              height: 14px;
          }
          .lgIconContainer svg {
              width: 16px;
              height: 16px;
          }
        `}
    </style>
    {icon && <span className={`${size}IconContainer`}>{icon}</span>}
    {children}
  </>
);

export const Badge = ({ children, variant = "gray", size = "md", capitalize = true, icon, as, href }: BadgeProps) => {
  if (as === Link && href) {
    return (
      <Link
        className={clsx(
          "!no-underline inline-flex justify-center items-center shrink-0 rounded-[9999px] font-sans font-medium whitespace-nowrap tabular-nums",
          capitalize && "capitalize",
          variants[variant],
          sizes[size]
        )}
        href={href}
      >
        <Content icon={icon} size={size} children={children} />
      </Link>
    );
  }

  return (
    <div className={clsx(
      "inline-flex justify-center items-center shrink-0 rounded-[9999px] font-sans font-medium whitespace-nowrap tabular-nums",
      capitalize && "capitalize",
      variants[variant],
      sizes[size]
    )}>
      <Content icon={icon} size={size} children={children} />
    </div>
  );
};
```

Install NPM dependencies:
```bash
clsx, next
```

Extend existing Tailwind 4 index.css with this code (or if project uses Tailwind 3, extend tailwind.config.js or globals.css):
```css
@import "tailwindcss";
@import "tw-animate-css";

@theme inline {
  --color-context-card-border: var(--context-card-border);
  --color-blue-100: var(--ds-blue-100);
  --color-blue-600: var(--ds-blue-600);
  --color-blue-900: var(--ds-blue-900);
  --color-gray-400: var(--ds-gray-400);
  --color-gray-500: var(--ds-gray-500);
  --color-gray-900: var(--ds-gray-900);
  --color-gray-1000: var(--ds-gray-1000);
  --color-background-100: var(--ds-background-100);
  --color-blue-700: var(--ds-blue-700);
  --color-trial-start: var(--ds-trial-start);
  --color-trial-end: var(--ds-trial-end);
}

:root {
  --context-card-border: hsla(0, 0%, 92%, 1);
  --ds-blue-100: oklch(97.32% 0.0141 251.56);
  --ds-blue-600: oklch(73.08% 0.1583 248.133320980386);
  --ds-blue-900: oklch(53.18% 0.2399 256.9900584162342);
  --ds-gray-400: hsla(0, 0%, 92%, 1);
  --ds-gray-500: hsla(0, 0%, 79%, 1);
  --ds-gray-900: hsla(0, 0%, 40%, 1);
  --ds-gray-1000: hsla(0, 0%, 9%, 1);
  --ds-background-100: hsla(0, 0%, 100%, 1);
  --ds-blue-700: oklch(57.61% 0.2508 258.23);
  --ds-trial-start: rgb(0, 112, 243);
  --ds-trial-end: rgb(248, 28, 229);
}

.dark {
  --context-card-border: hsla(0, 0%, 18%, 1);
  --ds-blue-100: oklch(22.17% 0.069 259.89);
  --ds-blue-600: oklch(64.94% 0.1982 251.8131841760864);
  --ds-blue-900: oklch(71.7% 0.1648 250.79360374054167);
  --ds-gray-400: hsla(0, 0%, 18%, 1);
  --ds-gray-500: hsla(0, 0%, 27%, 1);
  --ds-gray-900: hsla(0, 0%, 63%, 1);
  --ds-gray-1000: hsla(0, 0%, 93%, 1);
  --ds-background-100: hsla(0,0%,4%, 1);
  --ds-blue-700: oklch(57.61% 0.2321 258.23);
}

```

Implementation Guidelines
 1. Analyze the component structure and identify all required dependencies
 2. Review the component's argumens and state
 3. Identify any required context providers or hooks and install them
 4. Questions to Ask
 - What data/props will be passed to this component?
 - Are there any specific state management requirements?
 - Are there any required assets (images, icons, etc.)?
 - What is the expected responsive behavior?
 - What is the best place to use this component in the app?

Steps to integrate
 0. Copy paste all the code above in the correct directories
 1. Install external dependencies
 2. Fill image assets with Unsplash stock images you know exist
 3. Use lucide-react icons for svgs or logos if component requires them
